app.message=This is Dev config for UserMicroservices

spring.application.name=UserMicroserviceDev

server.port=8080

server.servlet.context-path=/user

spring.datasource.url=jdbc:mysql://localhost:3307/user_microservice
spring.datasource.username=root
spring.datasource.password=123456789
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.hibernate.ddl-auto=update


#eureke, dù comment 3 dòng này lại nhưng nó vẫn sẽ đăng kí do dependancy đc add và sẽ cấu hình mặc định như dưới
eureka.client.serviceUrl.defaultZone=http://localhost:8888/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true


# Zipkin
# trace each and every request, khi ở production thì sẽ tốn thời gian để trace tất cả nên sẽ giảm xuống còn 0.6
management.tracing.sampling.probability=1.0
# mặc định là sẽ chạy url này nên k thêm config bên dư cũng k sao
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans


#jwt
jwt.secret=753474857438754387594385743975348574893759843753498776576576575765634545435365346534645645364565465347657547465
jwt.refresh.secret=123454857438754387594385743975348574893759843753498776576576575765634545435365346534645645364565465347657554321
#jwt.expiration=432000000
jwt.expiration= 60000000
jwt.refresh.expiration=864000000
jwt.algorithms=HmacSHA256
jwt.header=Authorization
jwt.prefix=Bearer


#kafka        (Producer)
spring.kafka.bootstrap-servers=localhost:9094
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer

#(send message String)
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#(send message Object)
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer



# actuator (health để show detail requests, ...)
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always
# circuitbreakers để show requests failed, ...
management.health.circuitbreakers.enabled=true



# resilience4J
resilience4j.circuitbreaker.instances.companyBreaker.registerHealthIndicator=true
# kích thước cửa sổ là 10 latest nếu type là count_based, type là time_based sẽ lấy trong khoảng 10 dơn vị thời gian  để tính toán failure-rate-threshold
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-size=10
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-type=count_based
# ít nhất 5 requests để  circuitbreaker tính toán rate lỗi, nếu k đủ sẽ k chuyển sang status OPEN
resilience4j.circuitbreaker.instances.companyBreaker.minimum-number-of-calls=5
#  ở status HALF-OPEN, nó sẽ thử 3 requests xem hệ thống phục hồi chưa, nếu pass thì sang dạng CLOSE (healthy)
resilience4j.circuitbreaker.instances.companyBreaker.permitted-number-of-calls-in-half-open-state=3
# khi status OPEN, sau 10s nó sẽ qua status HALF-OPEN để cho phép test requests bên trên xem hệ thống phục hồi chưa
resilience4j.circuitbreaker.instances.companyBreaker.wait-duration-in-open-state=10s
# tự động chuyêển sang HALF-OPEN khi đợi wait-duration-in-open-state=10s ở trên
resilience4j.circuitbreaker.instances.companyBreaker.automatic-transition-from-open-to-half-open-enabled=true
# ngưỡng 50% failed các requests thì chuyển sang dạng OPEN
resilience4j.circuitbreaker.instances.companyBreaker.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.companyBreaker.register-health-indicator=true


resilience4j.ratelimiter.instances.companyBreaker.timeout-duration=0
resilience4j.ratelimiter.instances.companyBreaker.limit-refresh-period=4s
# giời hạn 2 requests mỗi 4s, nếu quá thì sẽ báo lỗi RateLimiterException
resilience4j.ratelimiter.instances.companyBreaker.limit-for-period=2

resilience4j.retry.instances.companyBreaker.max-attempts=5
resilience4j.retry.instances.companyBreaker.wait-duration=2s

